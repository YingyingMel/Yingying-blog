{"version":3,"file":"static/js/199.bb81b110.chunk.js","mappings":"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","sources":["pages/article/index.js","store/login.Store.js","store/user.Store.js","store/channel.Store.js","store/index.js"],"sourcesContent":["import { Link, useNavigate } from 'react-router-dom'\r\nimport { Card, Breadcrumb, Form, Button, Radio, DatePicker, Select, Table, Tag, Space, Popconfirm } from 'antd'\r\nimport 'moment' //无需安装，直接引入\r\nimport { EditOutlined, DeleteOutlined } from '@ant-design/icons'\r\nimport './index.scss'\r\nimport { http } from '@/utils'\r\n\r\nimport img404 from '@/assets/error.png'\r\nimport { useEffect, useState } from 'react'\r\nimport { useStore } from '@/store'\r\n\r\nconst { Option } = Select\r\nconst { RangePicker } = DatePicker\r\n\r\nconst Article = () => {\r\n\r\n  //表格columns结构,是根据后端的文档数据设置的，里面的参数是单个文章里面的属性,dataIndex要与后端数据的字段名相同\r\n  const columns = [\r\n    {\r\n      title: 'Cover',\r\n      dataIndex: 'images',\r\n      render: images => { //下面src地址要根据后端返回数据提取url，文档里有res截图\r\n        //console.log(JSON.parse(images))\r\n        return <img src={JSON.parse(images)[0] ? JSON.parse(images)[0].url : img404} width={80} height={60} alt=\"\" />\r\n      }\r\n    },\r\n    {\r\n      title: 'Title',\r\n      dataIndex: 'title',\r\n      width: 220\r\n    },\r\n    {\r\n      title: 'Status',\r\n      dataIndex: 'status',\r\n      render: status => {\r\n        switch (status) {\r\n          case 2: return <Tag color=\"grey\">Draft</Tag>\r\n          case 3: return <Tag color=\"blue\">Reviewing</Tag>\r\n          case 4: return <Tag color=\"green\">Reviewed</Tag>\r\n          case 5: return <Tag color=\"red\">Review failed</Tag>\r\n          default: return <Tag color=\"blue\">Reviewing</Tag>\r\n        }\r\n      }\r\n    },\r\n    {\r\n      title: 'pub_date',\r\n      dataIndex: 'pub_date'\r\n    },\r\n    {\r\n      title: 'Readings',\r\n      dataIndex: 'read_count'\r\n    },\r\n    {\r\n      title: 'Comments',\r\n      dataIndex: 'comment_count'\r\n    },\r\n    {\r\n      title: 'Likes',\r\n      dataIndex: 'like_count'\r\n    },\r\n    {//对于action,有两种方案，1.下面这种，删除这个dataIndex(dataIndex用于与后端数据库字段匹配)，render: data => ,否则拿到的data是undefined\r\n      //2. 保留dataIndex:'action', render要写成 render: (_, data) =>， _是占位符\r\n      title: 'Action',\r\n      render: data => { //data就是fetchArticleList时返回并存在ArticleData.list里的每一条被遍历的数据\r\n        return (\r\n          <Space size=\"middle\">\r\n            <Button\r\n              type=\"primary\"\r\n              shape=\"circle\"\r\n              icon={<EditOutlined />}\r\n              onClick={() => goPublish(data)} />\r\n            {/* or: onClick={() => history.push(`/publish?id=${data.id}`)} */}\r\n            <Popconfirm\r\n              title=\"Are you sure to delete it?\"\r\n              onConfirm={() => delArticle(data)}\r\n              okText=\"yes\"\r\n              cancelText=\"cancel\"\r\n            >\r\n              <Button\r\n                type=\"primary\"\r\n                danger\r\n                shape=\"circle\"\r\n                icon={<DeleteOutlined />}\r\n              />\r\n            </Popconfirm>\r\n          </Space>\r\n        )\r\n      }\r\n    }\r\n  ]\r\n\r\n\r\n  //从channelStore去频道列表,可直接去return里渲染列表(记得先去layout里导入并与useEffect绑定)\r\n  const { channelStore } = useStore()\r\n\r\n  //文章列表管理，统一管理数据\r\n  const [articleData, setAticleData] = useState({\r\n    list: [],\r\n    count: 0\r\n  })\r\n\r\n  //文章页面参数管理\r\n  const [params, setParams] = useState({\r\n    page: 1,\r\n    per_page: 10\r\n  })\r\n\r\n  //获取后端article数据\r\n  //只要涉及到异步请求的函数，都放到useEffect内部，\r\n  //原因：函数写到外面每次组件更新都会重新进行函数初始化，这本身是一次性能消耗\r\n  //而写到useEffect内部，只会在依赖项发生变化的时候，函数才会重新初始化，避免性能损失。\r\n  useEffect(() => {\r\n    const loadList = async () => {\r\n      const res = await http.get('/my/article/list', { params })\r\n      //console.log(res)\r\n      setAticleData({\r\n        list: res.data.data,\r\n        count: res.data.total_count\r\n      })\r\n    }\r\n    loadList()\r\n  }, [params])\r\n\r\n  //在按了筛选键表格提交后，onFinish调用onSearch能拿到所有用户提交的要筛选的values\r\n  //打印出来，挑选出需要的数据后setParams，再把Params发送服务器重新请求数据并渲染筛选后的列表\r\n  const onSearch = (values) => { //这里的values是Form收集到的所有数据\r\n    //console.log(values)\r\n    const { status, channel_id, date } = values\r\n    const _params = {} //临时声明一个变量用来存要修改的参数 \r\n    if (status === 1) {\r\n      _params.status = null\r\n    } else {\r\n      _params.status = status\r\n    }\r\n    if (channel_id) {\r\n      _params.channel_id = channel_id\r\n    }\r\n    if (date) {\r\n      _params.begin_pubdate = date[0].format('DD-MM-YYYY') //返回的是个moment对象\r\n      _params.end_pubdate = date[1].format('DD-MM-YYYY') //需要format格式化一下\r\n    }\r\n    //console.log(_params)\r\n    // 修改params参数 触发接口再次发起请求\r\n    setParams({\r\n      ...params,\r\n      ..._params\r\n    })\r\n  }\r\n\r\n  //分页设置\r\n  const onChangePage = (page) => {\r\n    setParams({\r\n      ...params,\r\n      page: page\r\n    })\r\n  }\r\n  //编辑跳转\r\n  const navigate = useNavigate()\r\n  const goPublish = (data) => {\r\n    navigate(`/publish?id=${data.id}`)\r\n  }\r\n\r\n\r\n\r\n  //删除文章\r\n  const delArticle = async (data) => {\r\n    //console.log(data) //先打印看看能否收集到的文章id\r\n    await http.delete(`/my/article/delete/${data.id}`)\r\n    // 更新列表\r\n    setParams({\r\n      page: 1,\r\n      per_page: 10\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className='site-card-border-less-wrapper'>\r\n      {/* 筛选区域 */}\r\n      <Card\r\n        title={\r\n          <Breadcrumb separator=\">\">\r\n            <Breadcrumb.Item>\r\n              <Link to=\"/\">Home</Link>\r\n            </Breadcrumb.Item>\r\n            <Breadcrumb.Item>Diary List</Breadcrumb.Item>\r\n          </Breadcrumb>\r\n        }\r\n        style={{ marginBottom: 20 }}\r\n      >\r\n        {/* 对每个Form里面的数据采集只需要在Form标签里进行OnFinish，不需要每个item都进行OnFinish操作 */}\r\n        {/* 下面的values值是根据接口来设置的，不能乱设，但是'all'的时候是null，会报错，这里用-1代替 */}\r\n        <Form\r\n          onFinish={onSearch}\r\n          initialValues={{ status: 1 }}\r\n          labelCol={{ span: 2 }}>\r\n          <Form.Item label=\"Status\" name=\"status\">\r\n            <Radio.Group>\r\n              <Radio value={1}>All</Radio>\r\n              <Radio value={2}>Draft</Radio>\r\n              <Radio value={3}>Reviewing</Radio>\r\n              <Radio value={4}>Reviewed</Radio>\r\n              <Radio value={5}>Review failed</Radio>\r\n            </Radio.Group>\r\n          </Form.Item>\r\n\r\n          <Form.Item label=\"Category\" name=\"channel_id\">\r\n            <Select\r\n              placeholder=\"category select\"\r\n              style={{ width: 120 }}\r\n            >\r\n              {channelStore.channelList.map(channels => <Option key={channels.id} value={channels.id}>{channels.name}</Option>)}\r\n            </Select>\r\n          </Form.Item>\r\n\r\n          <Form.Item label=\"Date\" name=\"date\">\r\n            <RangePicker></RangePicker>\r\n          </Form.Item>\r\n\r\n          <Form.Item wrapperCol={{ offset: 2 }}>\r\n            <Button type=\"primary\" htmlType=\"submit\" >\r\n              Search\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </Card>\r\n      {/* 文章列表区域 */}\r\n      <Card title={` Results found: ${articleData.count} `}>\r\n        <Table\r\n          rowKey=\"id\"\r\n          columns={columns}\r\n          dataSource={articleData.list}\r\n          pagination={{\r\n            position: ['bottomRight'],\r\n            current: params.page,\r\n            pageSize: params.per_page,\r\n            onChange: onChangePage,\r\n            total: articleData.count //加上这个属性才能在条数超过10条时显示页码2\r\n          }} />\r\n      </Card>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Article","//login module\r\nimport { makeAutoObservable } from 'mobx'\r\nimport { http, setToken, getToken, removeToken } from '@/utils'\r\n\r\nclass LoginStore {\r\n  token = getToken() || '' //初始化的时候优先从本地取，取不到再初始化为空值\r\n  constructor() {\r\n    //响应式\r\n    makeAutoObservable(this)\r\n  }\r\n\r\n  //登录\r\n  getToken = async ({ username, password }) => {\r\n    //调用http请求后端登录接口\r\n    const res = await http.post('/api/login', {\r\n      username,\r\n      password\r\n    })\r\n    //存入token\r\n    this.token = res.data.token //从服务器获得token\r\n    //存入localstorage\r\n    setToken(this.token)\r\n  }\r\n\r\n\r\n\r\n  //退出，删除token\r\n  loginOut = () => {\r\n    this.token = \"\" //清空token值\r\n    removeToken() //删除localstorage里的token\r\n  }\r\n\r\n}\r\n\r\nexport default LoginStore","import { makeAutoObservable } from 'mobx'\r\nimport { http } from '@/utils'\r\n\r\nclass UserStore {\r\n  userInfo = {}\r\n  constructor() {\r\n    //响应式\r\n    makeAutoObservable(this)\r\n  }\r\n\r\n  getUserInfo = async () => {\r\n    //调用接口获取user信息\r\n    const res = await http.get('my/userinfo')\r\n    //console.log(res)\r\n    this.userInfo = res.data\r\n  }\r\n}\r\n\r\nexport default UserStore","import { makeAutoObservable } from 'mobx'\r\nimport { http } from '@/utils'\r\n\r\nclass ChannelStore {\r\n  channelList = []\r\n  constructor() {\r\n    //响应式\r\n    makeAutoObservable(this)\r\n  }\r\n  ////频道列表管理，article和publish都要用到\r\n  //获取频道列表, 因为layout页面用{ observer } from 'mobx-react-lite'与store绑定，要记得去layout页面导入,并放入useEffect首次加载中\r\n  loadChannelList = async () => {\r\n    const res = await http.get('/my/channels')\r\n    //console.log(res) //查看res的结构，提取需要的数据\r\n    this.channelList = res.data.data\r\n  }\r\n}\r\n\r\nexport default ChannelStore\r\n\r\n","//统一所有的stroe到这个根store, 套模板写\r\nimport React from \"react\"\r\nimport LoginStore from \"./login.Store\"\r\nimport UserStore from \"./user.Store\"\r\nimport ChannelStore from \"./channel.Store\"\r\n\r\nclass RootStore {\r\n  constructor() {\r\n    this.loginStore = new LoginStore()\r\n    this.userStore = new UserStore()\r\n    this.channelStore = new ChannelStore()\r\n    //...再导入其他store\r\n  }\r\n}\r\n\r\n//实例化RootStore\r\n//导出useStore context\r\n\r\nconst rootStore = new RootStore()\r\nconst context = React.createContext(rootStore)\r\n\r\nconst useStore = () => React.useContext(context)\r\n\r\nexport { useStore }"],"names":["Option","Select","RangePicker","DatePicker","columns","title","dataIndex","render","images","src","JSON","parse","url","width","height","alt","status","color","data","size","type","shape","icon","EditOutlined","onClick","goPublish","onConfirm","delArticle","okText","cancelText","danger","DeleteOutlined","channelStore","useStore","useState","list","count","articleData","setAticleData","page","per_page","params","setParams","useEffect","loadList","http","res","total_count","navigate","useNavigate","id","className","separator","to","style","marginBottom","onFinish","values","channel_id","date","_params","begin_pubdate","format","end_pubdate","initialValues","labelCol","span","label","name","value","placeholder","channelList","map","channels","wrapperCol","offset","htmlType","rowKey","dataSource","pagination","position","current","pageSize","onChange","total","LoginStore","token","getToken","username","password","setToken","loginOut","removeToken","makeAutoObservable","this","UserStore","userInfo","getUserInfo","ChannelStore","loadChannelList","rootStore","RootStore","loginStore","userStore","context","React"],"sourceRoot":""}